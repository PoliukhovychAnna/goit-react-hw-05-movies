{"version":3,"file":"static/js/42.8e6ffcf0.chunk.js","mappings":"sPAEaA,EAAgBC,EAAAA,GAAAA,GAAH,yCAIbC,EAAWD,EAAAA,GAAAA,GAAH,4J,mBC+CrB,EA/CgB,WACd,OAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAYC,EAAAA,EAAAA,UAuBlB,OAtBAC,EAAAA,EAAAA,YAAU,WACJF,EAAUG,SACZH,EAAUG,QAAQC,QAGpBJ,EAAUG,QAAU,IAAIE,gBACxBR,GAAa,IAEbS,EAAAA,EAAAA,IAAgB,CAAER,QAAAA,GAAWE,EAAUG,QAAQI,QAC5CC,MAAK,SAAAC,GACJhB,EAAWgB,EAASC,SACpBb,GAAa,GACbF,EAAS,KACV,IACAgB,OAAM,SAAAC,GACY,iBAAbA,EAAIC,OACNhB,GAAa,GACbF,EAASiB,EAAIE,SAEhB,GACJ,GAAE,CAAChB,EAASJ,KAGX,UAACN,EAAD,WACGQ,IAAa,SAACmB,EAAA,EAAD,KACZnB,IACCJ,EAAQwB,OAAS,EACdxB,EAAQyB,KAAI,SAAAC,GAAM,OAChB,UAAC5B,EAAD,YACE,0BACE,uBAAG,YAAW,IAAE4B,EAAOC,WAEzB,0BACE,uBAAG,aAAY,IAAED,EAAOE,aALbF,EAAOG,GADN,IAUlB,+CAGX,C,mMClDKC,EAAU,mCACVC,EAAU,gCAEHC,EAAiB,mCAAG,WAAMjB,GAAN,uFACRkB,EAAAA,EAAAA,IAAA,UAAaF,EAAb,sBAA0C,CAC/DhB,OAAAA,EACAmB,OAAQ,CAAEC,QAASL,KAHU,cACzBb,EADyB,yBAKxBA,EAASmB,MALe,2CAAH,sDAQjBC,EAAe,mCAAG,aAAoBtB,GAApB,gFAAST,EAAT,EAASA,QAAT,SACN2B,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA6BzB,GAAW,CAC7DS,OAAAA,EACAmB,OAAQ,CAAEC,QAASL,KAHQ,cACvBb,EADuB,yBAKtBA,EAASmB,MALa,2CAAH,wDAQfE,EAAY,mCAAG,aAAoBvB,GAApB,gFAAST,EAAT,EAASA,QAAT,SACH2B,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA6BzB,EAA7B,YAAgD,CACrES,OAAAA,EACAmB,OAAQ,CAAEC,QAASL,KAHK,cACpBb,EADoB,yBAKnBA,EAASmB,MALU,2CAAH,wDAQZtB,EAAe,mCAAG,aAAoBC,GAApB,gFAAST,EAAT,EAASA,QAAT,SACN2B,EAAAA,EAAAA,IAAA,UAAaF,EAAb,iBAA6BzB,EAA7B,YAAgD,CACrES,OAAAA,EACAmB,OAAQ,CAAEC,QAASL,KAHQ,cACvBb,EADuB,yBAKtBA,EAASmB,MALa,2CAAH,wDAQfG,EAAiB,mCAAG,WAAOC,EAAOzB,GAAd,uFACRkB,EAAAA,EAAAA,IAAA,UAClBF,EADkB,8BACWS,EADX,0BAErB,CAAEzB,OAAAA,EAAQmB,OAAQ,CAAEC,QAASL,KAHA,cACzBb,EADyB,yBAKxBA,EAASmB,MALe,2CAAH,uD","sources":["components/Reviews/StyledReviews.jsx","components/Reviews/Reviews.jsx","services/API.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const StyledReviews = styled.ul`\n  width: 600px;\n`;\n\nexport const ListItem = styled.li`\n  width: 500px;\n  padding: 20px;\n  border-radius: 6px;\n  border: 3px solid hsla(270, 100%, 60%, 0.664);\n  margin-bottom: 20px;\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'services/API';\nimport { StyledReviews, ListItem } from './StyledReviews';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const abortCtrl = useRef();\n  useEffect(() => {\n    if (abortCtrl.current) {\n      abortCtrl.current.abort();\n    }\n\n    abortCtrl.current = new AbortController();\n    setIsLoading(true);\n\n    getMovieReviews({ movieId }, abortCtrl.current.signal)\n      .then(response => {\n        setReviews(response.results);\n        setIsLoading(false);\n        setError(null);\n      })\n      .catch(err => {\n        if (err.code !== 'ERR_CANCELED') {\n          setIsLoading(false);\n          setError(err.message);\n        }\n      });\n  }, [movieId, error]);\n\n  return (\n    <StyledReviews>\n      {isLoading && <Loader />}\n      {!isLoading &&\n        (reviews.length > 0\n          ? reviews.map(review => (\n              <ListItem key={review.id}>\n                <p>\n                  <b>Author:</b> {review.author}\n                </p>\n                <p>\n                  <b>Comment:</b> {review.content}\n                </p>\n              </ListItem>\n            ))\n          : \"We don't have any reviews for this movie.\")}\n    </StyledReviews>\n  );\n};\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'c4ae0d1c8ef3d257c8b5fa435eb44c06';\nconst baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async signal => {\n  const response = await axios.get(`${baseURL}trending/movie/day`, {\n    signal,\n    params: { api_key: API_KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieDetails = async ({ movieId }, signal) => {\n  const response = await axios.get(`${baseURL}movie/${movieId}`, {\n    signal,\n    params: { api_key: API_KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieCast = async ({ movieId }, signal) => {\n  const response = await axios.get(`${baseURL}movie/${movieId}/credits`, {\n    signal,\n    params: { api_key: API_KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieReviews = async ({ movieId }, signal) => {\n  const response = await axios.get(`${baseURL}movie/${movieId}/reviews`, {\n    signal,\n    params: { api_key: API_KEY },\n  });\n  return response.data;\n};\n\nexport const getMovieByRequest = async (query, signal) => {\n  const response = await axios.get(\n    `${baseURL}search/movie?query=${query}&language=en-US&page=1`,\n    { signal, params: { api_key: API_KEY } }\n  );\n  return response.data;\n};\n"],"names":["StyledReviews","styled","ListItem","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","movieId","useParams","abortCtrl","useRef","useEffect","current","abort","AbortController","getMovieReviews","signal","then","response","results","catch","err","code","message","Loader","length","map","review","author","content","id","API_KEY","baseURL","getTrendingMovies","axios","params","api_key","data","getMovieDetails","getMovieCast","getMovieByRequest","query"],"sourceRoot":""}